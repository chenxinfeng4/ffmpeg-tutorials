#include <iostream>
#include <string>
extern "C" {
#include <libavcodec/avcodec.h>
#include <libavformat/avformat.h>
#include <libavutil/imgutils.h>
#include <libavutil/opt.h>
}

class FFmpegVideoWriter {
public:
    FFmpegVideoWriter(std::string filename, std::string codec_name, float fps, int width, int height, std::string pix_fmt);
    void write(uint8_t* framearray);
    void release();

private:
    std::string filename;
    std::string codec_name;
    float fps;
    int width;
    int height;
    std::string pix_fmt;

    AVFormatContext* fmt_ctx = nullptr;
    AVCodecContext* codec_ctx = nullptr;
    AVCodec* codec = nullptr;
    AVFrame* frame = nullptr;
    AVPacket packet;
    int stream_index = -1;
};

FFmpegVideoWriter::FFmpegVideoWriter(std::string filename, std::string codec_name, float fps, int width, int height, std::string pix_fmt)
        : filename(filename), codec_name(codec_name), fps(fps), width(width), height(height), pix_fmt(pix_fmt) {
    av_register_all();
    avcodec_register_all();

    // 打开输出文件
    if (avformat_alloc_output_context2(&fmt_ctx, nullptr, nullptr, filename.c_str()) < 0) {
        throw std::runtime_error("Could not allocate output context");
    }

    // 查找编码器
    codec = avcodec_find_encoder_by_name(codec_name.c_str());
    if (!codec) {
        throw std::runtime_error("Codec not found");
    }

    // 创建编码器上下文
    codec_ctx = avcodec_alloc_context3(codec);
    if (!codec_ctx) {
        throw std::runtime_error("Could not allocate video codec context");
    }

    // 设置编码器参数
    codec_ctx->bit_rate = 400000;
    codec_ctx->width = width;
    codec_ctx->height = height;
    codec_ctx->time_base = (AVRational){1, fps};
    codec_ctx->gop_size = 10;
    codec_ctx->max_b_frames = 1;
    codec_ctx->pix_fmt = AV_PIX_FMT_GRAY8; // 假设输入是灰度图像

    // 打开编码器
    if (avcodec_open2(codec_ctx, codec, nullptr) < 0) {
        throw std::runtime_error("Could not open codec");
    }

    // 创建流
    stream_index = avformat_new_stream(fmt_ctx, codec);
    if (!fmt_ctx->streams[stream_index]) {
        throw std::runtime_error("Could not allocate stream");
    }

    // 将编码器参数复制到流中
    if (avcodec_parameters_from_context(fmt_ctx->streams[stream_index]->codecpar, codec_ctx) < 0) {
        throw std::runtime_error("Could not copy codec parameters to stream");
    }

    // 打开输出文件
    if (!(fmt_ctx->oformat->flags & AVFMT_NOFILE) && (avio_open(&fmt_ctx->pb, filename.c_str(), AVIO_FLAG_WRITE) < 0)) {
        throw std::runtime_error("Could not open output file");
    }

    // 写入文件头
    if (avformat_write_header(fmt_ctx, nullptr) < 0) {
        throw std::runtime_error("Could not write header");
    }

    // 分配 AVFrame
    frame = av_frame_alloc();
    if (!frame) {
        throw std::runtime_error("Could not allocate video frame");
    }

    frame->format = codec_ctx->pix_fmt;
    frame->width = width;
    frame->height = height;

    // 分配帧缓冲区
    if (av_image_alloc(frame->data, frame->linesize, width, height, codec_ctx->pix_fmt, 32) < 0) {
        throw std::runtime_error("Could not allocate raw picture buffer");
    }
}

void FFmpegVideoWriter::write(uint8_t* framearray) {
    // 将输入数据复制到 AVFrame
    memcpy(frame->data[0], framearray, av_image_get_buffer_size(codec_ctx->pix_fmt, width, height, 32));

    // 设置时间戳
    frame->pts = av_rescale_q(codec_ctx->frame_number, codec_ctx->time_base, fmt_ctx->streams[stream_index]->time_base);

    // 编码帧
    int ret = avcodec_send_frame(codec_ctx, frame);
    if (ret < 0) {
        throw std::runtime_error("Error sending frame to encoder");
    }

    while (ret >= 0) {
        ret = avcodec_receive_packet(codec_ctx, &packet);
        if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF) {
            break;
        } else if (ret < 0) {
            throw std::runtime_error("Error during encoding");
        }

        // 写入数据包到输出文件
        packet.stream_index = stream_index;
        if (av_interleaved_write_frame(fmt_ctx, &packet) < 0) {
            throw std::runtime_error("Error writing packet to output file");
        }
        av_packet_unref(&packet);
    }
}

void FFmpegVideoWriter::release() {
    // 写入尾部信息
    av_write_trailer(fmt_ctx);

    // 释放帧
    av_frame_free(&frame);

    // 关闭编码器
    avcodec_free_context(&codec_ctx);

    // 关闭输出文件
    if (fmt_ctx && !(fmt_ctx->oformat->flags & AVFMT_NOFILE)) {
        avio_closep(&fmt_ctx->pb);
    }

    // 释放格式上下文
    avformat_free_context(fmt_ctx);
}